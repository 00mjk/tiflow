// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TmpServiceClient is the client API for TmpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TmpServiceClient interface {
	EventFeed(ctx context.Context, in *Request, opts ...grpc.CallOption) (TmpService_EventFeedClient, error)
}

type tmpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTmpServiceClient(cc grpc.ClientConnInterface) TmpServiceClient {
	return &tmpServiceClient{cc}
}

func (c *tmpServiceClient) EventFeed(ctx context.Context, in *Request, opts ...grpc.CallOption) (TmpService_EventFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TmpService_ServiceDesc.Streams[0], "/proto.TmpService/EventFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &tmpServiceEventFeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TmpService_EventFeedClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type tmpServiceEventFeedClient struct {
	grpc.ClientStream
}

func (x *tmpServiceEventFeedClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TmpServiceServer is the server API for TmpService service.
// All implementations must embed UnimplementedTmpServiceServer
// for forward compatibility
type TmpServiceServer interface {
	EventFeed(*Request, TmpService_EventFeedServer) error
	mustEmbedUnimplementedTmpServiceServer()
}

// UnimplementedTmpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTmpServiceServer struct {
}

func (UnimplementedTmpServiceServer) EventFeed(*Request, TmpService_EventFeedServer) error {
	return status.Errorf(codes.Unimplemented, "method EventFeed not implemented")
}
func (UnimplementedTmpServiceServer) mustEmbedUnimplementedTmpServiceServer() {}

// UnsafeTmpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TmpServiceServer will
// result in compilation errors.
type UnsafeTmpServiceServer interface {
	mustEmbedUnimplementedTmpServiceServer()
}

func RegisterTmpServiceServer(s grpc.ServiceRegistrar, srv TmpServiceServer) {
	s.RegisterService(&TmpService_ServiceDesc, srv)
}

func _TmpService_EventFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TmpServiceServer).EventFeed(m, &tmpServiceEventFeedServer{stream})
}

type TmpService_EventFeedServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type tmpServiceEventFeedServer struct {
	grpc.ServerStream
}

func (x *tmpServiceEventFeedServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

// TmpService_ServiceDesc is the grpc.ServiceDesc for TmpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TmpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TmpService",
	HandlerType: (*TmpServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventFeed",
			Handler:       _TmpService_EventFeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tmp.proto",
}
